import {
  IsString,
  IsOptional,
  IsDateString,
  IsEnum,
  IsBoolean,
  IsNotEmpty,
  Length,
  MaxLength,
  Matches,
  IsUUID,
  ValidateIf,
  IsNumber,
  Min,
  Max,
  IsObject,
  IsArray,
} from 'class-validator';
import { Transform, Type } from 'class-transformer';
import { Sanitize } from '../../../common/transforms/sanitize.transform';
import { ApiProperty } from '@nestjs/swagger';

export enum PriorityEnum {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum TaskStatusEnum {
  PENDING = 'pending',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
}

export class CreateTaskDto {
  @ApiProperty({
    description: 'Task title',
    example: 'Complete math homework',
    minLength: 1,
    maxLength: 200,
  })
  @IsString({ message: 'Title must be a string' })
  @IsNotEmpty({ message: 'Title is required' })
  @Length(1, 200, { message: 'Title must be between 1 and 200 characters' })
  @Sanitize
  title: string;

  @ApiProperty({
    description: 'Subject ID for categorization',
    example: '123e4567-e89b-12d3-a456-426614174000',
    required: false,
    format: 'uuid',
  })
  @IsOptional()
  @IsUUID(4, { message: 'Subject ID must be a valid UUID' })
  subjectId?: string;

  @ApiProperty({
    description: 'Detailed description of the task',
    example: 'Complete exercises 1-10 from chapter 5',
    required: false,
    maxLength: 1000,
  })
  @IsOptional()
  @IsString({ message: 'Description must be a string' })
  @MaxLength(1000, { message: 'Description must not exceed 1000 characters' })
  @Sanitize
  description?: string;

  @ApiProperty({
    description: 'Due date in ISO format',
    example: '2024-12-31T23:59:59.000Z',
    required: false,
    format: 'date-time',
  })
  @IsOptional()
  @IsDateString({}, { message: 'Due date must be a valid ISO date string' })
  @ValidateIf((o, v) => v !== null && v !== undefined)
  @Transform(({ value }) => {
    if (value && typeof value === 'string') {
      const date = new Date(value);
      if (date < new Date()) {
        throw new Error('Due date cannot be in the past');
      }
      return value;
    }
    return value;
  })
  dueDate?: string;

  @ApiProperty({
    description: 'Task priority level',
    example: 'medium',
    enum: PriorityEnum,
    required: false,
    default: 'medium',
  })
  @IsOptional()
  @IsEnum(PriorityEnum, {
    message: 'Priority must be one of: low, medium, high, urgent',
  })
  priority?: PriorityEnum;

  @ApiProperty({
    description: 'Task status',
    example: 'pending',
    enum: TaskStatusEnum,
    required: false,
    default: 'pending',
  })
  @IsOptional()
  @IsEnum(TaskStatusEnum, {
    message:
      'Status must be one of: pending, in_progress, completed, cancelled',
  })
  status?: TaskStatusEnum;

  @ApiProperty({
    description: 'Estimated time to complete in minutes',
    example: 60,
    required: false,
    minimum: 1,
    maximum: 10080, // 1 week
  })
  @IsOptional()
  @IsNumber({}, { message: 'Estimated minutes must be a number' })
  @Min(1, { message: 'Estimated minutes must be at least 1' })
  @Max(10080, { message: 'Estimated minutes cannot exceed 1 week' })
  estimatedMinutes?: number;

  @ApiProperty({
    description: 'Whether this task was generated by AI',
    example: false,
    required: false,
    default: false,
  })
  @IsOptional()
  @IsBoolean({ message: 'AI generated must be a boolean value' })
  aiGenerated?: boolean;

  @ApiProperty({
    description: 'AI metadata for generated tasks',
    example: { model: 'gpt-3.5-turbo', confidence: 0.85 },
    required: false,
  })
  @IsOptional()
  @IsObject({ message: 'AI metadata must be an object' })
  aiMetadata?: {
    model?: string;
    prompt?: string;
    confidence?: number;
  };
}

export class UpdateTaskDto {
  @ApiProperty({
    description: 'Task title',
    example: 'Complete math homework',
    required: false,
    minLength: 1,
    maxLength: 200,
  })
  @IsOptional()
  @IsString({ message: 'Title must be a string' })
  @Length(1, 200, { message: 'Title must be between 1 and 200 characters' })
  @ValidateIf((o, v) => v !== null && v !== undefined && v !== '')
  @Sanitize
  title?: string;

  @ApiProperty({
    description: 'Subject ID for categorization',
    example: '123e4567-e89b-12d3-a456-426614174000',
    required: false,
    format: 'uuid',
  })
  @IsOptional()
  @IsUUID(4, { message: 'Subject ID must be a valid UUID' })
  @ValidateIf((o, v) => v !== null && v !== undefined && v !== '')
  subjectId?: string;

  @ApiProperty({
    description: 'Detailed description of the task',
    example: 'Complete exercises 1-10 from chapter 5',
    required: false,
    maxLength: 1000,
  })
  @IsOptional()
  @IsString({ message: 'Description must be a string' })
  @MaxLength(1000, { message: 'Description must not exceed 1000 characters' })
  @ValidateIf((o, v) => v !== null && v !== undefined && v !== '')
  @Sanitize
  description?: string;

  @ApiProperty({
    description: 'Due date in ISO format',
    example: '2024-12-31T23:59:59.000Z',
    required: false,
    format: 'date-time',
  })
  @IsOptional()
  @IsDateString({}, { message: 'Due date must be a valid ISO date string' })
  @ValidateIf((o, v) => v !== null && v !== undefined && v !== '')
  @Transform(({ value }) => {
    if (value && typeof value === 'string') {
      const date = new Date(value);
      if (date < new Date()) {
        throw new Error('Due date cannot be in the past');
      }
      return value;
    }
    return value;
  })
  dueDate?: string;

  @ApiProperty({
    description: 'Task priority level',
    example: 'high',
    enum: PriorityEnum,
    required: false,
  })
  @IsOptional()
  @IsEnum(PriorityEnum, {
    message: 'Priority must be one of: low, medium, high, urgent',
  })
  priority?: PriorityEnum;

  @ApiProperty({
    description: 'Task status',
    example: 'in_progress',
    enum: TaskStatusEnum,
    required: false,
  })
  @IsOptional()
  @IsEnum(TaskStatusEnum, {
    message:
      'Status must be one of: pending, in_progress, completed, cancelled',
  })
  status?: TaskStatusEnum;

  @ApiProperty({
    description: 'Estimated time to complete in minutes',
    example: 60,
    required: false,
    minimum: 1,
    maximum: 10080, // 1 week
  })
  @IsOptional()
  @IsNumber({}, { message: 'Estimated minutes must be a number' })
  @Min(1, { message: 'Estimated minutes must be at least 1' })
  @Max(10080, { message: 'Estimated minutes cannot exceed 1 week' })
  @ValidateIf((o, v) => v !== null && v !== undefined)
  estimatedMinutes?: number;

  @ApiProperty({
    description: 'Actual time spent in minutes',
    example: 45,
    required: false,
    minimum: 0,
  })
  @IsOptional()
  @IsNumber({}, { message: 'Actual minutes must be a number' })
  @Min(0, { message: 'Actual minutes cannot be negative' })
  @ValidateIf((o, v) => v !== null && v !== undefined)
  actualMinutes?: number;

  @ApiProperty({
    description: 'Progress percentage (0-100)',
    example: 75,
    required: false,
    minimum: 0,
    maximum: 100,
  })
  @IsOptional()
  @IsNumber({}, { message: 'Progress percentage must be a number' })
  @Min(0, { message: 'Progress percentage cannot be negative' })
  @Max(100, { message: 'Progress percentage cannot exceed 100' })
  @ValidateIf((o, v) => v !== null && v !== undefined)
  progressPercentage?: number;
}

export class TaskParamsDto {
  @ApiProperty({
    description: 'Task ID',
    example: '123e4567-e89b-12d3-a456-426614174000',
    format: 'uuid',
  })
  @IsString({ message: 'Task ID must be a string' })
  @IsNotEmpty({ message: 'Task ID is required' })
  @IsUUID(4, { message: 'Task ID must be a valid UUID' })
  id: string;
}

export class TaskQueryDto {
  @ApiProperty({
    description: 'Search term for title and description',
    required: false,
    maxLength: 255,
  })
  @IsOptional()
  @IsString({ message: 'Search term must be a string' })
  @MaxLength(255, { message: 'Search term too long' })
  @Sanitize
  search?: string;

  @ApiProperty({
    description: 'Filter by subject IDs',
    required: false,
    type: [String],
  })
  @IsOptional()
  @IsArray({ message: 'Subject IDs must be an array' })
  @IsUUID(4, { each: true, message: 'Each subject ID must be a valid UUID' })
  subjectIds?: string[];

  @ApiProperty({
    description: 'Filter by priority levels',
    required: false,
    enum: PriorityEnum,
    isArray: true,
  })
  @IsOptional()
  @IsArray({ message: 'Priority must be an array' })
  @IsEnum(PriorityEnum, {
    each: true,
    message: 'Each priority must be one of: low, medium, high, urgent',
  })
  priority?: PriorityEnum[];

  @ApiProperty({
    description: 'Filter by status values',
    required: false,
    enum: TaskStatusEnum,
    isArray: true,
  })
  @IsOptional()
  @IsArray({ message: 'Status must be an array' })
  @IsEnum(TaskStatusEnum, {
    each: true,
    message:
      'Each status must be one of: pending, in_progress, completed, cancelled',
  })
  status?: TaskStatusEnum[];

  @ApiProperty({
    description: 'Filter by due date from',
    required: false,
    format: 'date-time',
  })
  @IsOptional()
  @IsDateString(
    {},
    { message: 'Due date from must be a valid ISO date string' },
  )
  dueDateFrom?: string;

  @ApiProperty({
    description: 'Filter by due date to',
    required: false,
    format: 'date-time',
  })
  @IsOptional()
  @IsDateString({}, { message: 'Due date to must be a valid ISO date string' })
  dueDateTo?: string;

  @ApiProperty({
    description: 'Sort by field',
    required: false,
    enum: ['title', 'dueDate', 'priority', 'status', 'createdAt'],
  })
  @IsOptional()
  @IsString({ message: 'Sort by must be a string' })
  sortBy?: string;

  @ApiProperty({
    description: 'Sort order',
    required: false,
    enum: ['asc', 'desc'],
  })
  @IsOptional()
  @IsEnum(['asc', 'desc'], {
    message: 'Sort order must be either asc or desc',
  })
  sortOrder?: 'asc' | 'desc';

  @ApiProperty({
    description: 'Number of items per page',
    required: false,
    minimum: 1,
    maximum: 100,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Limit must be a number' })
  @Min(1, { message: 'Limit must be at least 1' })
  @Max(100, { message: 'Limit cannot exceed 100' })
  limit?: number;

  @ApiProperty({
    description: 'Number of items to skip',
    required: false,
    minimum: 0,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Offset must be a number' })
  @Min(0, { message: 'Offset cannot be negative' })
  offset?: number;
}

export class BatchUpdateTasksDto {
  @ApiProperty({
    description: 'Array of task IDs to update',
    type: [String],
    example: [
      '123e4567-e89b-12d3-a456-426614174000',
      '123e4567-e89b-12d3-a456-426614174001',
    ],
  })
  @IsArray({ message: 'Task IDs must be an array' })
  @IsUUID(4, { each: true, message: 'Each task ID must be a valid UUID' })
  @IsNotEmpty({ message: 'Task IDs array cannot be empty' })
  taskIds: string[];

  @ApiProperty({
    description: 'Updates to apply to all selected tasks',
    type: UpdateTaskDto,
  })
  @IsObject({ message: 'Update data must be an object' })
  @Type(() => UpdateTaskDto)
  updateData: Partial<UpdateTaskDto>;
}

export class BatchDeleteTasksDto {
  @ApiProperty({
    description: 'Array of task IDs to delete',
    type: [String],
    example: [
      '123e4567-e89b-12d3-a456-426614174000',
      '123e4567-e89b-12d3-a456-426614174001',
    ],
  })
  @IsArray({ message: 'Task IDs must be an array' })
  @IsUUID(4, { each: true, message: 'Each task ID must be a valid UUID' })
  @IsNotEmpty({ message: 'Task IDs array cannot be empty' })
  taskIds: string[];
}

export class UpdateTaskProgressDto {
  @ApiProperty({
    description: 'Progress percentage (0-100)',
    example: 75,
    minimum: 0,
    maximum: 100,
  })
  @IsNumber({}, { message: 'Progress percentage must be a number' })
  @Min(0, { message: 'Progress percentage cannot be negative' })
  @Max(100, { message: 'Progress percentage cannot exceed 100' })
  progressPercentage: number;
}
