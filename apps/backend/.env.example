# ===================================================
# Study Teddy Backend Environment Configuration
# ===================================================
# Copy this file to .env and update with your values

# Database Configuration
# PostgreSQL connection string
DATABASE_URL=postgresql://postgres:password@localhost:5432/studyteddy

# Database Connection Pool Settings
DB_POOL_MAX=20
DB_IDLE_TIMEOUT=20
DB_CONNECT_TIMEOUT=10
DB_DEBUG=false
DB_LOGGING=false

# ===================================================
# Security Configuration
# ===================================================

# JWT Configuration
# Generate a secure secret with: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
JWT_SECRET=your-super-secret-jwt-key-at-least-32-characters-long-CHANGE-THIS
JWT_EXPIRES_IN=7d

# ===================================================
# External Services
# ===================================================

# OpenAI Configuration
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-proj-your-openai-api-key-here
# Model options: gpt-4o-mini (recommended), gpt-4o, gpt-4-turbo
OPENAI_MODEL=gpt-4o-mini
OPENAI_MAX_TOKENS=500
OPENAI_TEMPERATURE=0.7

# Google OAuth Configuration
# Create OAuth 2.0 credentials at: https://console.cloud.google.com/apis/credentials
# Add authorized redirect URIs:
# - http://localhost:3001/auth/google/callback (for authentication)
# - http://localhost:3001/api/calendar/oauth/callback (for calendar sync)
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=GOCSPX-your-google-client-secret
GOOGLE_CALLBACK_URL=http://localhost:3001/auth/google/callback

# Google Calendar API Configuration
# Required scopes: https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events
GOOGLE_CALENDAR_SCOPES=https://www.googleapis.com/auth/calendar,https://www.googleapis.com/auth/calendar.events
GOOGLE_CALENDAR_CALLBACK_URL=http://localhost:3001/api/calendar/oauth/callback

# ===================================================
# Email Configuration - Resend Service (Recommended)
# ===================================================
# Get your API key from: https://resend.com/api-keys
RESEND_API_KEY=re_your_resend_api_key_here
RESEND_FROM_EMAIL="Study Teddy" <noreply@yourdomain.com>
RESEND_WEBHOOK_SECRET=your-webhook-secret-for-event-verification

# Email Templates and Caching
EMAIL_TEMPLATE_CACHE=true
EMAIL_TEMPLATE_CACHE_TTL=3600000

# Email Queue Configuration (Redis required for production)
EMAIL_BATCH_SIZE=10
EMAIL_QUEUE_CONCURRENCY=5
EMAIL_QUEUE_MAX_RETRIES=3

# Email Rate Limiting
EMAIL_HOURLY_LIMIT=100
EMAIL_DAILY_LIMIT=1000
EMAIL_BURST_LIMIT=10
EMAIL_BURST_WINDOW_MS=60000
EMAIL_GLOBAL_HOURLY_LIMIT=10000
EMAIL_GLOBAL_DAILY_LIMIT=50000

# Email Tracking
EMAIL_TRACKING_ENABLED=true
EMAIL_CLICK_TRACKING_ENABLED=true
EMAIL_OPEN_TRACKING_ENABLED=true

# Legacy Email Configuration (Fallback - Gmail SMTP)
# For Gmail: Enable 2FA and create app-specific password
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-specific-password
EMAIL_FROM="Study Teddy" <noreply@studyteddy.com>
SUPPORT_EMAIL=support@studyteddy.com

# ===================================================
# Application Configuration
# ===================================================
NODE_ENV=development
PORT=3001
FRONTEND_URL=http://localhost:3000
API_PREFIX=api

# CORS Origins (comma-separated for multiple origins)
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# ===================================================
# Rate Limiting Configuration
# ===================================================

# Global throttling settings (applies to all endpoints)
RATE_LIMIT_TTL=60000        # Time window in milliseconds (default: 1 minute)
RATE_LIMIT_COUNT=100        # Max requests per time window (default: 100)

# AI endpoint specific rate limits (per user, per time window)
# Chat endpoints (general AI conversations)
AI_CHAT_TTL=60000           # Time window in milliseconds (default: 1 minute)
AI_CHAT_LIMIT=10            # Max chat requests per minute per user

# Practice question generation (higher cost)
AI_PRACTICE_TTL=60000       # Time window in milliseconds (default: 1 minute)
AI_PRACTICE_LIMIT=5         # Max practice question requests per minute per user

# Study plan generation (highest cost)
AI_STUDY_PLAN_TTL=60000     # Time window in milliseconds (default: 1 minute)
AI_STUDY_PLAN_LIMIT=3       # Max study plan requests per minute per user

# Heavy AI operations (complex processing)
AI_HEAVY_TTL=60000          # Time window in milliseconds (default: 1 minute)
AI_HEAVY_LIMIT=2            # Max heavy operation requests per minute per user

# Light AI operations (stats, history, etc.)
AI_LIGHT_TTL=60000          # Time window in milliseconds (default: 1 minute)
AI_LIGHT_LIMIT=20           # Max light operation requests per minute per user

# ===================================================
# Calendar Sync Configuration
# ===================================================

# Sync scheduling settings
CALENDAR_SYNC_ENABLED=true                    # Enable/disable calendar sync
CALENDAR_INCREMENTAL_SYNC_INTERVAL=15        # Incremental sync interval in minutes (default: 15)
CALENDAR_FULL_SYNC_INTERVAL=360              # Full sync interval in minutes (default: 6 hours)
CALENDAR_MAX_CONCURRENT_SYNCS=3              # Maximum concurrent sync jobs (default: 3)

# Sync behavior settings
CALENDAR_SYNC_HISTORY_DAYS=30                # How many days back to sync initially (default: 30)
CALENDAR_SYNC_FUTURE_DAYS=365               # How many days ahead to sync (default: 365)
CALENDAR_DEFAULT_CONFLICT_RESOLUTION=manual  # Default conflict resolution: local_wins, remote_wins, manual
CALENDAR_AUTO_CREATE_TASKS=false            # Auto-create tasks from study events (default: false)
CALENDAR_STUDY_BLOCK_DETECTION=true         # Enable automatic study block detection (default: true)

# Performance settings
CALENDAR_SYNC_BATCH_SIZE=100                 # Number of events to process per batch (default: 100)
CALENDAR_SYNC_TIMEOUT_MS=300000             # Sync operation timeout in milliseconds (default: 5 minutes)
CALENDAR_TOKEN_REFRESH_BUFFER_MINUTES=5     # Refresh tokens N minutes before expiry (default: 5)

# Retry settings
CALENDAR_SYNC_MAX_RETRIES=3                 # Maximum retry attempts for failed syncs (default: 3)
CALENDAR_SYNC_RETRY_DELAY_MS=30000          # Initial retry delay in milliseconds (default: 30 seconds)
CALENDAR_SYNC_MAX_RETRY_DELAY_MS=300000     # Maximum retry delay in milliseconds (default: 5 minutes)

# Webhook settings
CALENDAR_WEBHOOK_ENABLED=true               # Enable webhook notifications from Google Calendar
CALENDAR_WEBHOOK_TTL_HOURS=168              # Webhook subscription TTL in hours (default: 7 days)
CALENDAR_WEBHOOK_SECRET=your-webhook-secret-key-change-this  # Secret for webhook verification

# Error handling
CALENDAR_SYNC_ERROR_THRESHOLD=5             # Disable sync after N consecutive errors (default: 5)
CALENDAR_SYNC_ERROR_COOLDOWN_HOURS=24       # Hours to wait before re-enabling after error threshold (default: 24)

# ===================================================
# Logging
# ===================================================
LOG_LEVEL=info  # Options: error, warn, info, debug, verbose

# ===================================================
# Optional Services
# ===================================================

# Redis Configuration (for caching and sessions)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your-redis-password

# Sentry Error Tracking and Performance Monitoring
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ORG=studyteddy
SENTRY_PROJECT=studyteddy-backend
SENTRY_AUTH_TOKEN=your-sentry-auth-token
SENTRY_RELEASE=1.0.0

# Analytics
# GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
# MIXPANEL_TOKEN=your-mixpanel-token

# ===================================================
# Webhook URLs (for external integrations)
# ===================================================

# Google Calendar webhooks - these URLs must be publicly accessible
# For development, use ngrok or similar service to expose localhost
# For production, use your actual domain
CALENDAR_WEBHOOK_BASE_URL=https://your-domain.com/api/calendar/webhook
# Development example with ngrok: https://abc123.ngrok.io/api/calendar/webhook

# Specific webhook endpoints (constructed from base URL)
# CALENDAR_WEBHOOK_GOOGLE_URL=${CALENDAR_WEBHOOK_BASE_URL}/google
# CALENDAR_WEBHOOK_OUTLOOK_URL=${CALENDAR_WEBHOOK_BASE_URL}/outlook

# Health check and monitoring webhooks
# HEALTH_CHECK_WEBHOOK_URL=https://your-monitoring-service.com/health
# ERROR_NOTIFICATION_WEBHOOK_URL=https://your-slack-webhook-url