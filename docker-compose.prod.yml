# =============================================================================
# Docker Compose Production Configuration for Study Teddy
# Optimized for production deployment with security and performance
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================

  postgres:
    image: pgvector/pgvector:pg16
    container_name: studyteddy-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    expose:
      - "5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/database/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backups/postgres:/var/backups/postgres
    networks:
      - studyteddy-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c work_mem=8MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    security_opt:
      - no-new-privileges:true
    user: postgres
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis:
    image: redis:7-alpine
    container_name: studyteddy-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --databases 16
    expose:
      - "6379"
    volumes:
      - redis_prod_data:/data
      - ./backups/redis:/var/backups/redis
    networks:
      - studyteddy-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: redis
    read_only: true
    tmpfs:
      - /tmp

  # =============================================================================
  # Application Services (Production Mode)
  # =============================================================================

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: production
    image: studyteddy/backend:${VERSION:-latest}
    container_name: studyteddy-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001

      # Database
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public&sslmode=prefer

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # Authentication
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL}

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-1000}

      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_SECURE: ${EMAIL_SECURE:-true}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}

      # File Storage
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

      # Rate Limiting
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      AI_RATE_LIMIT_TTL: ${AI_RATE_LIMIT_TTL:-60000}
      AI_RATE_LIMIT_MAX: ${AI_RATE_LIMIT_MAX:-10}

      # Security
      CORS_ORIGIN: ${CORS_ORIGIN}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}

    expose:
      - "3001"
    volumes:
      - backend_prod_uploads:/app/uploads:rw
      - backend_prod_logs:/app/logs:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - studyteddy-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXTAUTH_URL: ${NEXTAUTH_URL}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        SENTRY_DSN: ${SENTRY_DSN}
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    image: studyteddy/frontend:${VERSION:-latest}
    container_name: studyteddy-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0

      # API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}

      # Authentication
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}

      # Google OAuth
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}

      # Analytics
      NEXT_PUBLIC_GA_TRACKING_ID: ${NEXT_PUBLIC_GA_TRACKING_ID}
      NEXT_PUBLIC_MIXPANEL_TOKEN: ${NEXT_PUBLIC_MIXPANEL_TOKEN}

      # Security
      NEXT_PUBLIC_DEMO_MODE: "false"

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}

      # Performance
      NEXT_TELEMETRY_DISABLED: 1

    expose:
      - "3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - studyteddy-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # =============================================================================
  # Infrastructure Services
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: studyteddy-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - studyteddy-prod-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # =============================================================================
  # Monitoring and Backup Services
  # =============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: studyteddy-prometheus-prod
    restart: always
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    expose:
      - "9090"
    networks:
      - studyteddy-prod-network
    security_opt:
      - no-new-privileges:true
    user: nobody
    read_only: true
    tmpfs:
      - /tmp

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: studyteddy-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_LOG_LEVEL: warn
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    expose:
      - "3000"
    depends_on:
      - prometheus
    networks:
      - studyteddy-prod-network
    security_opt:
      - no-new-privileges:true
    user: grafana
    read_only: true
    tmpfs:
      - /tmp

  # Database backup service
  postgres-backup:
    image: postgres:16-alpine
    container_name: studyteddy-postgres-backup
    restart: "no"
    environment:
      PGUSER: ${DB_USER}
      PGPASSWORD: ${DB_PASSWORD}
      PGDATABASE: ${DB_NAME}
      PGHOST: postgres
      PGPORT: 5432
    volumes:
      - ./backups/postgres:/backups
      - ./scripts/backup/postgres-backup.sh:/usr/local/bin/backup.sh:ro
    command: >
      sh -c "chmod +x /usr/local/bin/backup.sh &&
             while true; do
               /usr/local/bin/backup.sh;
               sleep 86400;
             done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - studyteddy-prod-network

  # Redis backup service
  redis-backup:
    image: redis:7-alpine
    container_name: studyteddy-redis-backup
    restart: "no"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./backups/redis:/backups
      - ./scripts/backup/redis-backup.sh:/usr/local/bin/backup.sh:ro
    command: >
      sh -c "chmod +x /usr/local/bin/backup.sh &&
             while true; do
               /usr/local/bin/backup.sh;
               sleep 86400;
             done"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - studyteddy-prod-network

# =============================================================================
# Production Volumes
# =============================================================================
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  backend_prod_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  backend_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs/backend
  nginx_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs/nginx
  nginx_cache:
    driver: local
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana

# =============================================================================
# Production Network
# =============================================================================
networks:
  studyteddy-prod-network:
    driver: bridge
    name: studyteddy-prod
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1
    driver_opts:
      com.docker.network.bridge.name: studyteddy-prod-br
      com.docker.network.driver.mtu: 1500