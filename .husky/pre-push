#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Running pre-push hooks...${NC}"

# Get the current branch
current_branch=$(git branch --show-current)

# Check if pushing to protected branches
if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then
  echo -e "${RED}‚ùå Direct push to main/master branch is not allowed!${NC}"
  echo -e "${YELLOW}Please create a pull request instead.${NC}"
  exit 1
fi

# Run comprehensive tests before push
echo -e "${YELLOW}üß™ Running comprehensive test suite...${NC}"

# Backend tests
echo -e "${BLUE}Testing backend...${NC}"
cd apps/backend
npm run test
if [ $? -ne 0 ]; then
  echo -e "${RED}‚ùå Backend tests failed.${NC}"
  cd ..
  exit 1
fi

npm run test:e2e
if [ $? -ne 0 ]; then
  echo -e "${RED}‚ùå Backend E2E tests failed.${NC}"
  cd ..
  exit 1
fi
cd ..

# Frontend tests
echo -e "${BLUE}Testing frontend...${NC}"
cd studyteddy-frontend
npm run test
if [ $? -ne 0 ]; then
  echo -e "${RED}‚ùå Frontend tests failed.${NC}"
  cd ..
  exit 1
fi

# Type checking
npm run type-check
if [ $? -ne 0 ]; then
  echo -e "${RED}‚ùå Frontend type checking failed.${NC}"
  cd ..
  exit 1
fi
cd ..

# Build verification
echo -e "${YELLOW}üèóÔ∏è  Verifying builds...${NC}"

# Backend build
echo -e "${BLUE}Building backend...${NC}"
cd apps/backend && npm run build
if [ $? -ne 0 ]; then
  echo -e "${RED}‚ùå Backend build failed.${NC}"
  cd ..
  exit 1
fi
cd ..

# Frontend build
echo -e "${BLUE}Building frontend...${NC}"
cd studyteddy-frontend && npm run build
if [ $? -ne 0 ]; then
  echo -e "${RED}‚ùå Frontend build failed.${NC}"
  cd ..
  exit 1
fi
cd ..

# Check for merge conflicts
echo -e "${YELLOW}üîç Checking for merge conflicts...${NC}"
if git diff --check; then
  echo -e "${GREEN}‚úÖ No merge conflicts found.${NC}"
else
  echo -e "${RED}‚ùå Merge conflicts detected. Please resolve them.${NC}"
  exit 1
fi

# Check for large files
echo -e "${YELLOW}üì¶ Checking for large files...${NC}"
large_files=$(git diff --cached --name-only --diff-filter=ACM | xargs -I {} find {} -size +10M 2>/dev/null)
if [ -n "$large_files" ]; then
  echo -e "${RED}‚ùå Large files detected (>10MB):${NC}"
  echo "$large_files"
  echo -e "${YELLOW}Consider using Git LFS for large files.${NC}"
  exit 1
fi

# Dependency audit
echo -e "${YELLOW}üîí Running security audit...${NC}"
npm audit --audit-level=high
if [ $? -ne 0 ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Security vulnerabilities found. Consider updating dependencies.${NC}"
  # Don't fail the push for audit issues, just warn
fi

# Check branch naming convention
if ! echo "$current_branch" | grep -qE "^(feature|bugfix|hotfix|release|chore)\/[a-z0-9-]+$"; then
  echo -e "${YELLOW}‚ö†Ô∏è  Warning: Branch name doesn't follow convention.${NC}"
  echo -e "${YELLOW}Recommended format: feature/description, bugfix/description, etc.${NC}"
fi

echo -e "${GREEN}‚úÖ All pre-push checks passed!${NC}"
echo -e "${GREEN}üöÄ Ready to push to $current_branch.${NC}"