# =============================================================================
# Docker Compose Configuration for Study Teddy Application
# Development Environment with all services
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================

  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: studyteddy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-studyteddy}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-studyteddy_dev_2025}
      POSTGRES_DB: ${DB_NAME:-studyteddy}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-studyteddy} -d ${DB_NAME:-studyteddy}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis for caching and Bull Queue
  redis:
    image: redis:7-alpine
    container_name: studyteddy-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_dev_2025}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-redis_dev_2025}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # =============================================================================
  # Application Services
  # =============================================================================

  # Backend API (NestJS)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: dev
      args:
        NODE_ENV: development
    container_name: studyteddy-backend
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: development
      PORT: 3001

      # Database
      DATABASE_URL: postgresql://${DB_USER:-studyteddy}:${DB_PASSWORD:-studyteddy_dev_2025}@postgres:5432/${DB_NAME:-studyteddy}?schema=public

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_2025}

      # Authentication
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL:-http://localhost:3001/auth/google/callback}

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-3.5-turbo}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-500}

      # Email
      EMAIL_HOST: ${EMAIL_HOST:-localhost}
      EMAIL_PORT: ${EMAIL_PORT:-1025}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@studyteddy.com}

      # File Storage
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_USE_SSL: "false"
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-studyteddy}

      # Rate Limiting
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      AI_RATE_LIMIT_TTL: ${AI_RATE_LIMIT_TTL:-60000}
      AI_RATE_LIMIT_MAX: ${AI_RATE_LIMIT_MAX:-10}

    ports:
      - "${BACKEND_PORT:-3001}:3001"
      - "9229:9229" # Debug port for development
    volumes:
      - ./apps/backend:/app
      - backend_node_modules:/app/node_modules
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: dev
      args:
        NODE_ENV: development
    container_name: studyteddy-frontend
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: development
      PORT: 3000

      # API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}

      # Authentication
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-key-change-this-in-production}

      # Google OAuth
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}

      # Analytics
      NEXT_PUBLIC_GA_TRACKING_ID: ${NEXT_PUBLIC_GA_TRACKING_ID:-}
      NEXT_PUBLIC_MIXPANEL_TOKEN: ${NEXT_PUBLIC_MIXPANEL_TOKEN:-}

      # Security
      NEXT_PUBLIC_DEMO_MODE: ${NEXT_PUBLIC_DEMO_MODE:-false}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-}

    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./apps/frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    depends_on:
      - backend
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Infrastructure Services
  # =============================================================================

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: studyteddy-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MinIO for Object Storage
  minio:
    image: minio/minio:latest
    container_name: studyteddy-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Development Tools
  # =============================================================================

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: studyteddy-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - studyteddy-network

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: studyteddy-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - studyteddy-network

  # Bull Dashboard for Queue Monitoring
  bull-dashboard:
    image: deadly0/bull-board:latest
    container_name: studyteddy-bull-dashboard
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_2025}
      PORT: 3001
    ports:
      - "${BULL_DASHBOARD_PORT:-3333}:3001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - studyteddy-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  studyteddy-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1