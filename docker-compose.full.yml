version: '3.9'

services:
  # ===========================================
  # PostgreSQL Database
  # ===========================================
  postgres:
    image: postgres:16-alpine
    container_name: studyteddy-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-studyteddy}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-studyteddy_secret_2024}
      POSTGRES_DB: ${DATABASE_NAME:-studyteddy_db}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-studyteddy} -d ${DATABASE_NAME:-studyteddy_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - studyteddy-network

  # ===========================================
  # Redis Cache & Queue
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: studyteddy-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_secret_2024}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "redis-data.aof"
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secret_2024}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - studyteddy-network

  # ===========================================
  # Upstash Redis (Alternative to local Redis)
  # ===========================================
  # Note: Upstash is a cloud service. Use environment variables:
  # UPSTASH_REDIS_REST_URL=https://your-redis-instance.upstash.io
  # UPSTASH_REDIS_REST_TOKEN=your-upstash-redis-token

  # ===========================================
  # MinIO Object Storage (S3 Compatible)
  # ===========================================
  minio:
    image: minio/minio:latest
    container_name: studyteddy-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secret_2024}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - studyteddy-network

  # ===========================================
  # Mailhog (Email Testing)
  # ===========================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: studyteddy-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /maildir
    volumes:
      - mailhog_data:/maildir
    networks:
      - studyteddy-network

  # ===========================================
  # Backend Application (NestJS)
  # ===========================================
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: studyteddy-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # App Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      HOST: 0.0.0.0

      # Database
      DATABASE_URL: postgresql://${DATABASE_USERNAME:-studyteddy}:${DATABASE_PASSWORD:-studyteddy_secret_2024}@postgres:5432/${DATABASE_NAME:-studyteddy_db}?schema=public&sslmode=disable

      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_secret_2024}@redis:6379

      # Alternative: Upstash Redis
      # UPSTASH_REDIS_REST_URL: ${UPSTASH_REDIS_REST_URL}
      # UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN}

      # Authentication
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_change_in_production_min_32_chars}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_jwt_refresh_secret_change_in_production}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-your_better_auth_secret_change_in_production}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your_nextauth_secret_change_in_production_32}

      # OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}

      # Email (using Mailhog for development)
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_SECURE: false
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@studyteddy.com}

      # Storage
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minio_secret_2024}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-studyteddy-uploads}
      AWS_S3_REGION: ${AWS_S3_REGION:-us-east-1}
      AWS_S3_ENDPOINT: http://minio:9000

      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      CSRF_ENABLED: ${CSRF_ENABLED:-true}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}

      # URLs
      BACKEND_URL: ${BACKEND_URL:-http://localhost:3001}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailhog:
        condition: service_started
    volumes:
      - ./apps/backend:/app/apps/backend
      - backend_node_modules:/app/apps/backend/node_modules
      - ./packages:/app/packages
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Frontend Application (Next.js)
  # ===========================================
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: studyteddy-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # App Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000

      # API URL
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://localhost:3001}

      # Authentication
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your_nextauth_secret_change_in_production_32}

      # OAuth (Public Keys)
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${NEXT_PUBLIC_GOOGLE_CLIENT_ID}

      # Analytics
      NEXT_PUBLIC_GA_TRACKING_ID: ${NEXT_PUBLIC_GA_TRACKING_ID}
      NEXT_PUBLIC_MIXPANEL_TOKEN: ${NEXT_PUBLIC_MIXPANEL_TOKEN}

      # Sentry
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}

      # Features
      NEXT_PUBLIC_ENABLE_AI: ${NEXT_PUBLIC_ENABLE_AI:-true}
      NEXT_PUBLIC_ENABLE_ANALYTICS: ${NEXT_PUBLIC_ENABLE_ANALYTICS:-true}
    depends_on:
      - backend
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - frontend_node_modules:/app/apps/frontend/node_modules
      - ./packages:/app/packages
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # NGINX Reverse Proxy
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: studyteddy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # pgAdmin (PostgreSQL Management)
  # ===========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: studyteddy-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@studyteddy.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-pgadmin_secret_2024}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - studyteddy-network

  # ===========================================
  # RedisInsight (Redis Management)
  # ===========================================
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: studyteddy-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - studyteddy-network

  # ===========================================
  # Prometheus (Metrics Collection)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: studyteddy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - studyteddy-network

  # ===========================================
  # Grafana (Metrics Visualization)
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: studyteddy-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_secret_2024}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - studyteddy-network

  # ===========================================
  # Elasticsearch (Logging)
  # ===========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: studyteddy-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - studyteddy-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Kibana (Log Visualization)
  # ===========================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: studyteddy-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - studyteddy-network

  # ===========================================
  # Backup Service (PostgreSQL & Redis)
  # ===========================================
  backup:
    image: alpine:latest
    container_name: studyteddy-backup
    restart: unless-stopped
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${DATABASE_USERNAME:-studyteddy}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-studyteddy_secret_2024}
      POSTGRES_DB: ${DATABASE_NAME:-studyteddy_db}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
    volumes:
      - ./backups:/backups
      - ./scripts/backup:/scripts:ro
    entrypoint: ["/scripts/backup.sh"]
    depends_on:
      - postgres
      - redis
    networks:
      - studyteddy-network

# ===========================================
# Networks
# ===========================================
networks:
  studyteddy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# Volumes
# ===========================================
volumes:
  # Database
  postgres_data:
    driver: local

  # Cache
  redis_data:
    driver: local

  # Object Storage
  minio_data:
    driver: local

  # Email
  mailhog_data:
    driver: local

  # Application
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

  # Management Tools
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local

  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

  # Web Server
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local