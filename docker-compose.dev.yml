# =============================================================================
# Docker Compose Development Configuration for Study Teddy
# Optimized for local development with hot reload and debugging
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================

  postgres:
    image: pgvector/pgvector:pg16
    container_name: studyteddy-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-studyteddy}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-studyteddy_dev_2025}
      POSTGRES_DB: ${DB_NAME:-studyteddy_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/database/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - studyteddy-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-studyteddy} -d ${DB_NAME:-studyteddy_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c max_connections=100
      -c shared_buffers=128MB

  redis:
    image: redis:7-alpine
    container_name: studyteddy-redis-dev
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_dev_2025}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - studyteddy-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-redis_dev_2025}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # =============================================================================
  # Application Services (Development Mode)
  # =============================================================================

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: dev
    container_name: studyteddy-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001

      # Database
      DATABASE_URL: postgresql://${DB_USER:-studyteddy}:${DB_PASSWORD:-studyteddy_dev_2025}@postgres:5432/${DB_NAME:-studyteddy_dev}?schema=public

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_2025}

      # Authentication
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-not-for-production}
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret-not-for-production}
      JWT_REFRESH_EXPIRES_IN: 7d

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: http://localhost:3001/auth/google/callback

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: gpt-3.5-turbo
      OPENAI_MAX_TOKENS: 500

      # Email (MailHog for development)
      EMAIL_HOST: mailhog
      EMAIL_PORT: 1025
      EMAIL_SECURE: "false"
      EMAIL_USER: ""
      EMAIL_PASSWORD: ""
      EMAIL_FROM: noreply@studyteddy.local

      # File Storage
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_USE_SSL: "false"
      MINIO_BUCKET_NAME: studyteddy-dev

      # Rate Limiting (Relaxed for development)
      RATE_LIMIT_TTL: 60000
      RATE_LIMIT_MAX: 1000
      AI_RATE_LIMIT_TTL: 60000
      AI_RATE_LIMIT_MAX: 100

      # Debug
      DEBUG: "*"
      LOG_LEVEL: debug

    ports:
      - "3001:3001"
      - "9229:9229" # Debug port
    volumes:
      - ./apps/backend:/app
      - backend_dev_node_modules:/app/node_modules
      - backend_dev_uploads:/app/uploads
      - backend_dev_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - studyteddy-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: dev
    container_name: studyteddy-frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000

      # API Configuration
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_APP_URL: http://localhost:3000

      # Authentication
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-nextauth-secret-not-for-production

      # Google OAuth
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}

      # Development flags
      NEXT_PUBLIC_DEMO_MODE: "true"
      NEXT_TELEMETRY_DISABLED: 1

      # Fast refresh and hot reload
      FAST_REFRESH: "true"
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"

    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
      - frontend_dev_node_modules:/app/node_modules
      - frontend_dev_next:/app/.next
    depends_on:
      - backend
    networks:
      - studyteddy-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Development Tools and Infrastructure
  # =============================================================================

  # MinIO for Object Storage
  minio:
    image: minio/minio:latest
    container_name: studyteddy-minio-dev
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_dev_data:/data
    networks:
      - studyteddy-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: studyteddy-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - studyteddy-dev-network

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: studyteddy-adminer-dev
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - studyteddy-dev-network

  # Bull Dashboard for Queue Monitoring
  bull-dashboard:
    image: deadly0/bull-board:latest
    container_name: studyteddy-bull-dashboard-dev
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_2025}
      PORT: 3001
    ports:
      - "3333:3001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - studyteddy-dev-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: studyteddy-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_PASSWORD:-redis_dev_2025}"
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - studyteddy-dev-network

  # =============================================================================
  # Development Proxy (Optional)
  # =============================================================================

  nginx-dev:
    image: nginx:alpine
    container_name: studyteddy-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - studyteddy-dev-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# =============================================================================
# Development Volumes
# =============================================================================
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_dev_data:
    driver: local
  backend_dev_node_modules:
    driver: local
  frontend_dev_node_modules:
    driver: local
  frontend_dev_next:
    driver: local
  backend_dev_uploads:
    driver: local
  backend_dev_logs:
    driver: local

# =============================================================================
# Development Network
# =============================================================================
networks:
  studyteddy-dev-network:
    driver: bridge
    name: studyteddy-dev
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1