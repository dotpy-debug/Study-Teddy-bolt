name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Code Quality and Security Checks
  lint-and-audit:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"

      - name: Audit dependencies
        run: npm audit --audit-level=high

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Testing
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: studyteddy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: studyteddy-backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./studyteddy-backend
        run: npm ci

      - name: Run database migrations
        working-directory: ./studyteddy-backend
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_test

      - name: Run unit tests
        working-directory: ./studyteddy-backend
        run: npm run test:cov
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          OPENAI_API_KEY: test-openai-key
          NODE_ENV: test

      - name: Run integration tests
        working-directory: ./studyteddy-backend
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          OPENAI_API_KEY: test-openai-key
          NODE_ENV: test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./studyteddy-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: SonarCloud Scan - Backend
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: studyteddy-backend

  # Frontend Testing
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: studyteddy-frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./studyteddy-frontend
        run: npm ci

      - name: Run type checking
        working-directory: ./studyteddy-frontend
        run: npx tsc --noEmit

      - name: Run unit tests
        working-directory: ./studyteddy-frontend
        run: npm run test:coverage
        env:
          CI: true

      - name: Run component tests
        working-directory: ./studyteddy-frontend
        run: npm run test:component
        env:
          CI: true

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./studyteddy-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: SonarCloud Scan - Frontend
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: studyteddy-frontend

  # E2E Testing
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: studyteddy_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./studyteddy-frontend
        run: npx playwright install --with-deps

      - name: Setup test database
        working-directory: ./studyteddy-backend
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_e2e

      - name: Start backend server
        working-directory: ./studyteddy-backend
        run: npm run start:prod &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_e2e
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: e2e-jwt-secret
          JWT_REFRESH_SECRET: e2e-refresh-secret
          PORT: 3001
          NODE_ENV: test

      - name: Start frontend server
        working-directory: ./studyteddy-frontend
        run: npm run build && npm run start &
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          PORT: 3000

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3001/health
          npx wait-on http://localhost:3000

      - name: Run E2E tests
        working-directory: ./studyteddy-frontend
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: studyteddy-frontend/playwright-report/
          retention-days: 7

  # Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-audit]

    strategy:
      matrix:
        app: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./studyteddy-${{ matrix.app }}
        run: npm ci

      - name: Build application
        working-directory: ./studyteddy-${{ matrix.app }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NODE_ENV: production

      - name: Check bundle size (frontend only)
        if: matrix.app == 'frontend'
        working-directory: ./studyteddy-frontend
        run: npm run analyze

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-validation]
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./studyteddy-${{ matrix.service }}
          push: false
          tags: studyteddy-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        working-directory: ./studyteddy-frontend
        run: npm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run backend load tests
        working-directory: ./studyteddy-backend
        run: npm run test:load

  # Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high