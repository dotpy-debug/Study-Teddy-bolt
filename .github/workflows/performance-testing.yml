name: Performance Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run performance tests daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18'
  BUN_VERSION: '1.0.0'

jobs:
  # Lighthouse Performance Audit
  lighthouse-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: [desktop, mobile]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Build application
        run: bun run build
        env:
          NODE_ENV: production

      - name: Run Lighthouse CI (${{ matrix.device }})
        run: |
          if [ "${{ matrix.device }}" = "mobile" ]; then
            bun run test:lighthouse:mobile
          else
            bun run test:lighthouse:desktop
          fi
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results-${{ matrix.device }}
          path: |
            .lighthouseci/
            lighthouse-*.html
            lighthouse-*.json

  # Core Web Vitals Testing
  core-web-vitals:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps

      - name: Build application
        run: bun run build

      - name: Run Core Web Vitals tests
        run: |
          bunx playwright test tests/performance/core-web-vitals.spec.ts
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Core Web Vitals results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: core-web-vitals-results
          path: |
            playwright-report/
            test-results/

  # Load Testing with k6
  load-testing:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Skip on PRs to avoid load on staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application (for load testing)
        run: |
          # In real scenario, this would start your staging environment
          echo "Starting test environment for load testing..."
          # docker-compose -f docker-compose.test.yml up -d

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be ready..."
          sleep 30  # In real scenario, use a proper health check

      - name: Run load tests
        run: |
          k6 run tests/performance/load-test.js --out json=load-test-results.json
        env:
          BASE_URL: http://localhost:3000  # Replace with your staging URL
          K6_VUS: 50
          K6_DURATION: 5m

      - name: Run stress tests
        run: |
          k6 run tests/performance/stress-test.js --out json=stress-test-results.json
        env:
          BASE_URL: http://localhost:3000

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: |
            load-test-results.json
            stress-test-results.json
            load-test-summary.html

  # Bundle Size Analysis
  bundle-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Build application
        run: bun run build
        env:
          NODE_ENV: production

      - name: Run bundle size check
        run: bun run test:bundle-size

      - name: Run bundle analysis
        run: bun run analyze:bundle

      - name: Check performance budget
        run: bun run test:performance-budget

      - name: Upload bundle analysis results
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis-results
          path: |
            bundle-analysis-report.json
            bundle-analysis-report.html
            performance-budget-report.json

      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            try {
              const bundleReport = JSON.parse(fs.readFileSync('bundle-analysis-report.json', 'utf8'));
              const budgetReport = JSON.parse(fs.readFileSync('performance-budget-report.json', 'utf8'));

              let comment = '## üì¶ Bundle Analysis Report\n\n';
              comment += `**Total Bundle Size:** ${bundleReport.totalSize} KB\n`;
              comment += `**JavaScript:** ${bundleReport.chunks.javascript?.totalSize || 0} KB\n`;
              comment += `**CSS:** ${bundleReport.chunks.css?.totalSize || 0} KB\n\n`;

              if (budgetReport.violations && budgetReport.violations.length > 0) {
                comment += '### ‚ö†Ô∏è Performance Budget Violations\n\n';
                budgetReport.violations.forEach(violation => {
                  comment += `- **${violation.metric}**: ${violation.actual} (budget: ${violation.budget})\n`;
                });
                comment += '\n';
              } else {
                comment += '### ‚úÖ All performance budgets are within limits!\n\n';
              }

              if (bundleReport.recommendations && bundleReport.recommendations.length > 0) {
                comment += '### üí° Optimization Recommendations\n\n';
                bundleReport.recommendations.slice(0, 3).forEach((rec, index) => {
                  const emoji = rec.priority === 'high' ? 'üî¥' : rec.priority === 'medium' ? 'üü°' : 'üü¢';
                  comment += `${index + 1}. ${emoji} **${rec.title}**\n`;
                  comment += `   ${rec.description}\n`;
                  comment += `   *Action: ${rec.action}*\n\n`;
                });
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post bundle analysis comment:', error.message);
            }

  # Performance Regression Detection
  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      - name: Build current version
        run: bun run build

      - name: Run performance tests (current)
        run: |
          bunx playwright test tests/performance/core-web-vitals.spec.ts --reporter=json > current-performance.json
        continue-on-error: true

      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      - name: Build base version
        run: |
          bun install
          bun run build

      - name: Run performance tests (base)
        run: |
          bunx playwright test tests/performance/core-web-vitals.spec.ts --reporter=json > base-performance.json
        continue-on-error: true

      - name: Compare performance results
        run: |
          node -e "
            const fs = require('fs');

            let currentResults, baseResults;
            try {
              currentResults = JSON.parse(fs.readFileSync('current-performance.json', 'utf8'));
              baseResults = JSON.parse(fs.readFileSync('base-performance.json', 'utf8'));
            } catch (error) {
              console.log('Could not parse performance results');
              process.exit(0);
            }

            const currentAvg = currentResults.suites?.[0]?.specs?.[0]?.tests?.[0]?.results?.[0]?.duration || 0;
            const baseAvg = baseResults.suites?.[0]?.specs?.[0]?.tests?.[0]?.results?.[0]?.duration || 0;

            if (currentAvg > baseAvg * 1.2) {
              console.log('‚ö†Ô∏è Performance regression detected!');
              console.log('Current average:', currentAvg + 'ms');
              console.log('Base average:', baseAvg + 'ms');
              console.log('Regression:', ((currentAvg - baseAvg) / baseAvg * 100).toFixed(2) + '%');
              process.exit(1);
            } else {
              console.log('‚úÖ No significant performance regression detected');
              console.log('Current average:', currentAvg + 'ms');
              console.log('Base average:', baseAvg + 'ms');
            }
          "

  # Generate Performance Report
  performance-report:
    needs: [lighthouse-audit, core-web-vitals, bundle-analysis]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all performance artifacts
        uses: actions/download-artifact@v3
        with:
          path: performance-artifacts

      - name: Generate performance summary
        run: |
          echo "# üöÄ Performance Test Results" > performance-summary.md
          echo "" >> performance-summary.md
          echo "## Test Execution Summary" >> performance-summary.md
          echo "- **Date**: $(date)" >> performance-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> performance-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> performance-summary.md
          echo "" >> performance-summary.md

          # Check if bundle analysis exists
          if [ -f "performance-artifacts/bundle-analysis-results/bundle-analysis-report.json" ]; then
            echo "## üì¶ Bundle Analysis" >> performance-summary.md
            echo "\`\`\`json" >> performance-summary.md
            jq '.summary' performance-artifacts/bundle-analysis-results/bundle-analysis-report.json >> performance-summary.md || echo "{}" >> performance-summary.md
            echo "\`\`\`" >> performance-summary.md
            echo "" >> performance-summary.md
          fi

          # Check for performance budget violations
          if [ -f "performance-artifacts/bundle-analysis-results/performance-budget-report.json" ]; then
            violations=$(jq '.summary.totalViolations' performance-artifacts/bundle-analysis-results/performance-budget-report.json)
            if [ "$violations" -gt 0 ]; then
              echo "‚ö†Ô∏è **$violations performance budget violation(s) detected!**" >> performance-summary.md
            else
              echo "‚úÖ **All performance budgets are within limits**" >> performance-summary.md
            fi
            echo "" >> performance-summary.md
          fi

          echo "## üìä Detailed Reports" >> performance-summary.md
          echo "Check the artifacts for detailed performance analysis reports." >> performance-summary.md

      - name: Upload performance summary
        uses: actions/upload-artifact@v3
        with:
          name: performance-summary
          path: performance-summary.md

      - name: Comment performance summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('performance-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Could not post performance summary:', error.message);
            }