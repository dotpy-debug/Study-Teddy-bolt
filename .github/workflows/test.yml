name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  BUN_VERSION: 'latest'

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: studyteddy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    defaults:
      run:
        working-directory: ./apps/backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('**/bun.lockb', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies
      run: bun install

    - name: Copy environment files
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/studyteddy_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Run database migrations
      run: bun run db:push
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_test

    - name: Run linting
      run: bun run lint

    - name: Run type checking
      run: bun run typecheck

    - name: Run unit tests
      run: bun run test:unit
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: bun run test:integration
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_test
        REDIS_URL: redis://localhost:6379

    - name: Run E2E tests
      run: bun run test:e2e
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_test
        REDIS_URL: redis://localhost:6379

    - name: Generate coverage report
      run: bun run test:coverage:ci
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_test
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          apps/backend/coverage/
          apps/backend/test-results/

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./apps/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          node_modules
          .next/cache
        key: ${{ runner.os }}-frontend-${{ hashFiles('**/bun.lockb', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies
      run: bun install

    - name: Copy environment files
      run: |
        cp .env.example .env.local
        echo "NEXT_PUBLIC_API_URL=http://localhost:3001" >> .env.local
        echo "NEXTAUTH_SECRET=test-secret" >> .env.local

    - name: Run linting
      run: bun run lint

    - name: Run type checking
      run: bun run typecheck

    - name: Build application
      run: bun run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001

    - name: Run unit tests
      run: bun run test:unit

    - name: Run enhanced tests
      run: bun run test:enhanced

    - name: Generate coverage report
      run: bun run test:coverage:ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          apps/frontend/coverage/
          apps/frontend/test-results/

  # E2E Testing with Playwright
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: studyteddy_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          **/node_modules
        key: ${{ runner.os }}-e2e-${{ hashFiles('**/bun.lockb', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-e2e-

    - name: Install dependencies (Backend)
      run: bun install
      working-directory: ./apps/backend

    - name: Install dependencies (Frontend)
      run: bun install
      working-directory: ./apps/frontend

    - name: Setup test environment
      run: |
        # Backend environment
        cd apps/backend
        cp .env.example .env.test
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/studyteddy_e2e" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret" >> .env.test

        # Frontend environment
        cd ../frontend
        cp .env.example .env.test
        echo "NEXT_PUBLIC_API_URL=http://localhost:3001" >> .env.test
        echo "NEXTAUTH_SECRET=test-secret" >> .env.test

    - name: Run database migrations
      run: bun run db:push
      working-directory: ./apps/backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_e2e

    - name: Build backend
      run: bun run build
      working-directory: ./apps/backend

    - name: Build frontend
      run: bun run build
      working-directory: ./apps/frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001

    - name: Install Playwright
      run: bun run playwright:install
      working-directory: ./apps/frontend

    - name: Install Playwright dependencies
      run: bun run playwright:install-deps
      working-directory: ./apps/frontend

    - name: Start backend server
      run: bun run start:prod &
      working-directory: ./apps/backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/studyteddy_e2e
        REDIS_URL: redis://localhost:6379
        PORT: 3001

    - name: Wait for backend to be ready
      run: |
        echo "Waiting for backend to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3001/health 2>/dev/null; then
            echo "Backend is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Backend failed to start"
            exit 1
          fi
          sleep 2
        done

    - name: Start frontend server
      run: bun run start &
      working-directory: ./apps/frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001
        PORT: 3000

    - name: Wait for frontend to be ready
      run: |
        echo "Waiting for frontend to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Frontend failed to start"
            exit 1
          fi
          sleep 2
        done

    - name: Run E2E tests
      run: bun run test:e2e:ci
      working-directory: ./apps/frontend
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
        TEST_USER_EMAIL: test@studyteddy.com
        TEST_USER_PASSWORD: testPassword123

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          apps/frontend/test-results/
          apps/frontend/playwright-report/

  # Security and Quality Checks
  security-quality:
    name: Security & Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      run: bun install
      working-directory: ./apps/backend

    - name: Install frontend dependencies
      run: bun install
      working-directory: ./apps/frontend

    - name: Run security audit (Backend)
      run: bun audit
      working-directory: ./apps/backend
      continue-on-error: true

    - name: Run security audit (Frontend)
      run: bun audit
      working-directory: ./apps/frontend
      continue-on-error: true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-quality]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Backend Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Frontend Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Component Tests: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
        echo "- User Journey Tests: ${{ needs.e2e-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Security & Quality" >> $GITHUB_STEP_SUMMARY
        echo "- Security Audit: ${{ needs.security-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.security-quality.result }}" >> $GITHUB_STEP_SUMMARY