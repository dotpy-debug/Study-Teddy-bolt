name: Continuous Integration (Bun)

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  # Code Quality and Security Checks
  lint-and-audit:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bun run lint

      - name: Run Prettier check
        run: bunx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"

      - name: Audit dependencies
        run: bun audit

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Testing
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: studyteddy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run database migrations
        working-directory: ./apps/backend
        run: bun run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_test

      - name: Run unit tests
        working-directory: ./apps/backend
        run: bun run test:cov
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          OPENAI_API_KEY: test-openai-key
          NODE_ENV: test

      - name: Run integration tests
        working-directory: ./apps/backend
        run: bun run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studyteddy_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          OPENAI_API_KEY: test-openai-key
          NODE_ENV: test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend Testing
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run type checking
        working-directory: ./apps/frontend
        run: bun run typecheck

      - name: Run unit tests
        working-directory: ./apps/frontend
        run: bun run test:coverage
        env:
          CI: true

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-audit]

    strategy:
      matrix:
        app: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        working-directory: ./apps/${{ matrix.app }}
        run: bun run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NODE_ENV: production

      - name: Check bundle size (frontend only)
        if: matrix.app == 'frontend'
        working-directory: ./apps/frontend
        run: bun run build:analyze

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-validation]
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.service }}
          push: false
          tags: studyteddy-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high