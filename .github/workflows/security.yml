name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: [studyteddy-backend, studyteddy-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./${{ matrix.directory }}
      run: npm ci

    - name: Run npm audit
      working-directory: ./${{ matrix.directory }}
      run: npm audit --audit-level=high

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=${{ matrix.directory }}/package.json

  # Container Image Scanning
  container-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build backend image
      run: docker build -t backend-scan ./studyteddy-backend

    - name: Build frontend image
      run: docker build -t frontend-scan ./studyteddy-frontend

    - name: Run Trivy scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'backend-scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'frontend-scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload backend Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'backend-trivy-results.sarif'

    - name: Upload frontend Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'frontend-trivy-results.sarif'

  # Secret Scanning
  secret-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Code Quality and Security Analysis
  codeql-analysis:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # SAST (Static Application Security Testing)
  sast-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

  # Infrastructure Security Scanning
  infrastructure-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: [studyteddy-backend, studyteddy-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./${{ matrix.directory }}
      run: npm ci

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Check licenses
      working-directory: ./${{ matrix.directory }}
      run: |
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' \
        --excludePrivatePackages \
        --summary